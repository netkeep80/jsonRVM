/*        c
       v__|__m
     m   _|_   v
  c__|__/_|_\__|__c  jsonRVM
     |  \_|_/  |     json Relations (Model) Virtual Machine
     v    |    m     https://github.com/netkeep80/jsonRVM
        __|__
       /  |  \
      /___|___\
Fractal Triune Entity

Licensed under the MIT License <http://opensource.org/licenses/MIT>.
Copyright © 2016 Vertushkin Roman Pavlovich <https://vk.com/earthbirthbook>.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
/*
------------------------------------------------------------------------------
		Введение

	В основе существующих методологий программирования лежат две базовые концепции,
это объект (структура) и метод (функция).

	В основе Модели Отношений положена концепция сущности, которая в зависимости
от своего внутреннего конститутивного принципа может быть либо структурой (объектом) либо функцией (методом).
В известной ER-модели для представления схемы базы данных используются два равноправных понятия — сущность и связь.
В модели отношений и сущность и связь есть суть одно и тоже. Сущность представляется как экземпляр отношения,
а связь (т.е. тип бинарной связи) есть относительный аспект сущности. Такое представление позволяет описывать не только внешние
отношения сущности, но и внутреннюю её модель, модель отношений.
Сущность в своём внутреннем принципе триедина, потому что она есть объединение трёх связей с другими
(или же с самой собой) сущностями. Каждая из 3х связей имеет своё значение
и характеризует тот аспект в котором выступает связанная сущность.

	Всего существует 3 типа связи:
1. с сущностью субъектом, т.е. сущностью выступающией в качестве субъекта
2. с сущностью отношением, т.е. сущностью выступающией в качестве бинарного направленного отношения между субъектом и объектом
3. с сущностью объектом, т.е. сущностью выступающией в качестве объект

	Т.е. в МО полагается, что внутренний конститутивный принцип конечного сущего реализается 
бинарным направленным отношением между двумя сущностями: сущностью-объектом и сущностью субъектом.
	Таким образом каждая сущность есть экземпляр определённого отношения между определённым
субъектом и определённым объектом.

	У сущности есть 3 качества (аспекта), в которых она может выступать в других сущностях:

1. объект определяющий модель (Model)
2. субъект определяющий представление (View)
3. отношение определяющий контроллер (Controller)

	У каждого проявления качества есть 3 определяющих параметра:

1. сущность, которая проявляет качество:
	объекта		,	субъекта		,	отношения
2. сущность, в которой проявляется одно из качеств другой сущности:
	модель		,	представление	,	контроллер
3. сущность, характеризующая качество проявления:
	объективное	,	субъективное	,	качественное

	В объектно-ориентированном программировании аналог сущности это активный объект,
который одновременно имеет собственное состояние и выполняет определённую функцию.

	Далее в начале этого файла идёт терминологический словарь, в котором представлены
термины из независимых источников информации.

	Комментарии расположенные ниже не имеют определённой общей структуры, потому что,
представляют из себя разные суждения записанные в разное время в результате исследования МО.
	Однако каждый комментарий помечен отдельным иерархическим тэгом, что позволит в
будущем сгенерировать единый структурированный и упорядоченный документ с описанием МО.

------------------------------------------------------------------------------
		Терминологический словарь

------------------------------------------------------------------------------
https://ru.wikipedia.org/wiki/%D0%A1%D1%83%D1%89%D0%BD%D0%BE%D1%81%D1%82%D1%8C
		Су́щность (др.-греч. οὐσία, ὑπόστᾰσις; лат. essentia, substantia) — смысл данной вещи,
то, что она есть сама по себе, в отличие от всех других вещей и в отличие от изменчивых
(под влиянием тех или иных обстоятельств) состояний вещи[1].

По Э. Корету[2], сущность — внутренне конститутивный принцип конечного сущего,
через ограничение и выделение его из иных содержаний бытия конституирующий его определённость.
В отличие от бытия (которое есть принцип полагания, позитивности) — сущность есть принцип негативный,
принцип ограничения: через (относительное) отрицание иных содержаний бытия сущность,
с одной стороны, негативным образом ограничивает, выделяет данное конечное сущее из других;
а с другой стороны, благодаря определённому характеру каждого отрицания,
позитивным образом придаёт данному конечному сущему определённость содержания,
смысловой образ данного конечного сущего.
Благодаря негативности ограничения сущность осуществляет позитивность сущностных
и смысловых образов конечных вещей. С сущностью возникает конкретная определённость сущего.
Благодаря своей сущности конечное сущее выделяется как относительное из абсолютного,
как конечное из бесконечного бытия. В метафизике сущность понимается как не принадлежащая ни бытию,
ни не-бытию, как «нечто среднее между ними»: как потенция,
возможность бытия по отношению к действительности бытия.
Говоря простым языком, сущностью называется то, благодаря чему нечто есть то, что оно есть.

В логике сущность (как существенный признак — лат. essentialia constitutiva) — это неотъемлемое качество,
без которого предмет невозможно мыслить. Сущность предмета выражается в его определении.

В просторечии синонимами слова сущность часто являются слова «суть», «идея», «назначение», «функция».

Сущность выявляется ответом на вопрос: «Что есть сущее?»,
который следует отличать от вопроса о бытии: «Есть ли?» («Существует ли?»).

		Сущность и субстанция

В развитии мысли о бытии категория сущности предшествует категории субстанции,
как предполагающая меньшую отчётливость разграничивающей, рассудочной деятельности.
Затем, с выработкой мысли о субстанции сущность отождествляется с её атрибутами.
Что касается отношения сущности к акциденту и модусу, то в одном смысле она их исключает,
в другом — отождествляется с ними. Как постоянный предикат субстанции,
сущность её не есть ни акцидент, ни модус; но и акцидент,
и модус как таковые имеют свою сущность, то есть свои постоянные предикаты.

Отношение сущности предмета к его субстанции есть отношение постоянных предикатов
к постоянному же субъекту и что, таким образом, по отношению к субстанции понятие
сущности совпадает с понятием атрибутов. Но отношением к понятию субстанции не выясняется
во всей полноте смысл понятия сущности. Постоянные предикаты предмета могут существовать
при разной степени определённости и постоянства его субъекта, и потому сущность не всегда
соотносительна субстанции.

Предмету может быть приписываемо неопределённое, не возведённое к отчётливости мысли бытие
— и такому неопределённому и неотчётливому субъекту могут, тем не менее,
принадлежать постоянные свойства, составляющие его сущность. С другой стороны,
предмет может заведомо иметь для мысли лишь условные постоянство и самостоятельность,
то есть субстанциальность его может быть отрицаема и, тем не менее,
ему можно приписывать постоянную природу или сущность. Это последнее соображение указывает
на неправильность очень часто встречающегося в философии противоположения между сущностью и явлением.

		Сущность и явление

Явление есть все то, чему принадлежит не бытие в точном значении этого слова,
но существование, то есть бытие обусловленное, зависимое. Не имея, таким образом,
само в себе субстанции, явление, однако, также имеет свою сущность,
то есть постоянные предикаты. Следовательно, противоположение существует не между
явлением и сущностью, а между явлением и тем сущим, которое служит первоисточником явления,
или, пожалуй, между сущностью явления и сущностью этого сущего. Эта особенность
понятия сущности может быть кратко выражена так, что для сущности,
как постоянного предиката, необходим субъект логический, но нет необходимости
в субъекте действительном.

В диалектическом материализме сущность и явление представляют собой одну из
«диалектических пар» категорий.

------------------------------------------------------------------------------
https://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82_(%D1%84%D0%B8%D0%BB%D0%BE%D1%81%D0%BE%D1%84%D0%B8%D1%8F)
	Объе́кт (лат. objectum «предмет») — философская категория, обозначающая вещь,
явление или процесс, на которые направлена предметно-практическая, управляющая
и познавательная деятельность субъекта (наблюдателя); при этом, в качестве
объекта может выступать и сам субъект. Субъектом может быть личность,
социальная группа или всё общество.

------------------------------------------------------------------------------
https://ru.wikipedia.org/wiki/%D0%A1%D1%83%D0%B1%D1%8A%D0%B5%D0%BA%D1%82_(%D1%84%D0%B8%D0%BB%D0%BE%D1%81%D0%BE%D1%84%D0%B8%D1%8F)
	Субъе́кт (лат. subjectum «лежащее внизу; находящееся в основе») — носитель
деятельности, сознания и познания[1]; индивид, познающий внешний мир (объект)
и воздействующий на него в своей практической деятельности; человек или
консолидированная группа лиц (напр., научное сообщество), общество, культура
или даже человечество в целом, противопоставляемые познаваемым или
преобразуемым объектам[2].

------------------------------------------------------------------------------
https://ru.wikipedia.org/wiki/%D0%A1%D0%B2%D0%BE%D0%B9%D1%81%D1%82%D0%B2%D0%BE
	Сво́йство (в философии, математике и логике) — атрибут предмета (объекта).
Например, о красном предмете говорится, что он обладает свойством «красноты».
Свойство можно рассматривать как форму предмета самого по себе, притом, что он
может обладать и другими свойствами. Свойства, следовательно, подпадают под
действие парадокса Рассела и парадокса Греллинга-Нельсона.

	По другому определению, свойство — сторона проявления качества. При этом
не всякое свойство предмета (объекта) должно рассматриваться при определении
качества: свойство у предмета может иметься, но при сравнении предмета с другими
оно может не быть отличительным или существенным.

	Свойства объекта зависят от вида взаимодействия объекта и субъекта, например:
если на яблоко смотреть — оно имеет цвет и форму; если его откусить — имеет
твёрдость и вкус; если его взвешивать — имеет вес; если оценивать его
габариты — имеет размеры, если трогать — имеет шероховатость. Объект является
своими свойствами не только субъекту, но и другим объектам, то есть свойства
могут проявляться и в ходе взаимодействия объектов друг с другом.

	Совокупность некоторых частных свойств предмета может проявляться в
некотором обобщённом свойстве предмета (поглощаться обобщённым свойством).
Например, «краснота» яблока — обобщённое свойство яблока, а процентные доли
содержания отдельных химических веществ в кожице яблока (характеризующие эту
«красноту» яблока) — частные свойства яблока; «динамика» автомобиля — обобщённое
свойство автомобиля, а мощность двигателя, снаряжённая масса, отношение главной
передачи и др. (характеризующие эту «динамику» автомобиля) — частные свойства автомобиля.

	Свойство отличается от логического понятия класса тем, что не связано с
понятием экстенсиональности, а от философского понятия класса — тем, что
свойство рассматривается в качестве отличного (отделённого) от предмета,
который обладает им. 

------------------------------------------------------------------------------
https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D0%B0%D1%8F_%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C
	Информационная модель — модель объекта, представленная в виде информации,
описывающей существенные для данного рассмотрения параметры и переменные
величины объекта, связи между ними, входы и выходы объекта и позволяющая путём
подачи на модель информации об изменениях входных величин моделировать
возможные состояния объекта[1].

	Информационная модель (в широком, общенаучном смысле) — совокупность
информации, характеризующая существенные свойства и состояния объекта,
процесса, явления, а также взаимосвязь с внешним миром. 

------------------------------------------------------------------------------
https://ru.wikipedia.org/wiki/%D0%AF%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_(%D1%84%D0%B8%D0%BB%D0%BE%D1%81%D0%BE%D1%84%D0%B8%D1%8F)
	Явле́ние — вообще всё, что чувственно воспринимаемо; особенно бросающееся в
каком-то отношении в глаза (например, какое-либо явление природы).

	С точки зрения теории познания явление есть выражение, свидетельство наличия
чего-то другого; так, высокая температура есть явление болезни, то есть болезнь
извещает о себе посредством высокой температуры, она проявляется через эту
температуру. В философии Канта явление — коррелятивное понятие к «вещи-в-себе».
Н. Гартман говорит: сущее в себе (см. Познание) есть являющееся в явлении.
Иначе явление было бы пустой видимостью. «Я познаю нечто» и «нечто является мне»
— два выражения, обозначающие одно и то же отношение между субъектом и объектом
(см. Видимость). Противоположность между явлением и сущим-в-себе выступает наиболее
резко в инд. философии (см. Шанкара); в европейской мысли эта противоположность
выступает в христианстве в противопоставлении посюстороннего и потустороннего и
выражает собой определённый, не только теоретический, скепсис; см. также Иллюзионизм,
Феноменализм.

	Явле́ние — совокупность процессов материально-информационного преобразования,
обусловленных общими причинами. С точки зрения наблюдателя может быть:

    постоянным;
    периодическим;
    эпизодическим.

------------------------------------------------------------------------------
https://ru.wikipedia.org/wiki/%D0%9A%D0%B0%D1%87%D0%B5%D1%81%D1%82%D0%B2%D0%BE_(%D1%84%D0%B8%D0%BB%D0%BE%D1%81%D0%BE%D1%84%D0%B8%D1%8F)
	Ка́чество — философская категория, выражающая совокупность существенных
признаков, особенностей и свойств, которые отличают один предмет или явление
от других и придают ему определённость. Качество предмета или явления, как
правило, не сводится к отдельным его свойствам. Оно связано с предметом как
целым, охватывает его полностью и неотделимо от него. Поэтому понятие качества
связывается с бытием предмета. Предмет не может, оставаясь самим собой,
потерять своё качество. Например, переход в новое качество. 

------------------------------------------------------------------------------
https://ru.wikipedia.org/wiki/%D0%9A%D0%B0%D0%B6%D0%B8%D0%BC%D0%BE%D1%81%D1%82%D1%8C
	Кажимость (видимость) — философская (логическая) категория, означающая
превратное определение истинного бытия, основанное на чувственно-воспринимаемом,
внешнем явлении предмета познания.

	Кажимость есть абстракция любой истинной сущности для чувственного или
(что то же самое) рассудочного мышления, принимающего за истину вещи (предмета
познания) только то, что непосредственно дано ему в чувственном восприятии
(познании) этой вещи. В кажущейся полноте чувственного восприятия внешних вещей
рассудок действительно фиксирует только их поверхностные свойства, принимая
случайные явления и связи таковых за истинное (существенные определения) бытие
данных вещей. Следовательно, рассудочное мышление в своих результатах
(представлениях) всегда имеет дело только с видимостью истины, её абстрактным
проявлением, кажущимся рассудку истиной во всей полноте.

	Различие между кажимостью и действительностью истины (сущности вещи)
выступает только в логической форме разумного мышления, в котором снимается
противоположность внешнего и внутреннего отношения сторон, содержащихся в
предмете познания, устанавливается их взаимная необходимость. Все прочие
способы и формы познания (рассудочные, формально-логические) по причине
ограниченности их мыслительных возможностей, обусловленной зависимостью от
чувственного восприятия с одной стороны, разделением познающего сознания и
познаваемого предмета — с другой, имеют дело только с видимостью истины в
вещах — принимают только кажущиеся истинными внешние, чувственно-данные
проявления вещей за их истину. На этом основании в опытных науках и связанных
с ними рассудочных учений в философии и формальной логике возникают и
развиваются формы мировоззрений, принципиально отрицающих познаваемость истины:
агностицизм, скептицизм, стоицизм. Современными формами таких мировоззрений
выступают: в философии — все направления позитивизма и пост-модернизма, в
опытных науках — попытки создания «единых», «общих», «не-противоречивых»
эмпирических теорий (картин) всех вещей во Вселенной и Вселенной вообще.
Сторонники подобных взглядов на истину, однако же, склонны находить причины
логической и фактической ошибочности своих мировоззрений и теорий в самих вещах,
а не ограничениях самого рассудочного способа познания вещей. Критика
рассудочного мышления и наука мышления разумного дана и разработана Г. В. Ф.
Гегелем в «Феноменологии духа» и «Науке логики». Там же можно найти точное
определение категории «видимость» (кажимость). 

------------------------------------------------------------------------------
https://ru.wikipedia.org/wiki/%D0%90%D1%82%D1%80%D0%B8%D0%B1%D1%83%D1%82_(%D1%84%D0%B8%D0%BB%D0%BE%D1%81%D0%BE%D1%84%D0%B8%D1%8F)
	Атрибу́т — существенный, неотъемлемый признак предмета или явления (в отличие
от преходящих, случайных его состояний) — то, что составляет сущность субстанции,
её фундаментальное свойство, необходимый для её существования предикат[1].

	Атрибуты совершенно независимы, то есть не могут влиять друг на друга.
Однако как для субстанции в целом, так и для каждой отдельной вещи выраженность
существования через атрибут протяжения и мышления согласуются: «Порядок и связь
идей те же, что порядок и связь вещей»[2]. 

------------------------------------------------------------------------------
https://ru.wikipedia.org/wiki/Model-View-Controller
Model-View-Controller (MVC, «Модель-Представление-Контроллер», «Модель-Вид-Контроллер»)
— схема разделения данных приложения, пользовательского интерфейса и управляющей
логики на три отдельных компонента: модель, представление и контроллер — таким образом,
что модификация каждого компонента может осуществляться независимо[1].

Модель (Model) предоставляет данные и реагирует на команды контроллера,
изменяя свое состояние[1].

Представление (View) отвечает за отображение данных модели пользователю,
реагируя на изменения модели[1].

Контроллер (Controller) интерпретирует действия пользователя, оповещая модель
о необходимости изменений[1].

------------------------------------------------------------------------------
https://ru.wikipedia.org/wiki/HMVC
HMVC (англ. Hierarchical model–view–controller) — Иерархические Модель-Вид-Контроллер,
одно из расширений архитектурного паттерна MVC, позволяющее решить некоторые
проблемы масштабируемости приложений, имеющих классическую MVC-архитектуру.

Впервые описано в 2000-м году[1], в одной из статей блога JavaWorld, но
некоторые разработчики отмечают, что оно, по сути, является переосмыслением
более строгого паттерна PAC (рус.)англ. (англ. Presentation-Abstraction-Control),
описанного в 1987 году.

Согласно парадигме HMVC, каждая отдельная MVC триада используется в качестве
слоя в иерархической структуре. При этом, каждая триада в этой иерархии независима
от других, и может обратиться к контроллеру другой триады. Такой подход существенно
облегчает и ускоряет разработку сложных приложений, облегчает их дальнейшую
поддержку и масштабирование, способствует повторному использованию кода.

------------------------------------------------------------------------------
MHMVC (Multilayered Hierarchical Model-View-Controller), т.е. Многослойный
Иерархический Модель – Вид – Контроллер. В данной концепции иерархия представлений
одного слоя может служить в качестве иерархии модели для следующего слоя и наоборот,
что позволяет гибко реализовать многослойную архитектуру приложения.

При реализации этой концепции в коде, было так же применено тактическое
решение, объединить в каждом слое данных классы представлений и классы контроллеров
через наследование представлений от контроллеров для упрощения архитектуры и
уменьшения общего количества классов в коде в 2 раза.

------------------------------------------------------------------------------
https://ru.wikipedia.org/wiki/JSON
	JSON (англ. JavaScript Object Notation, обычно произносится как /ˈdʒeɪsən/
JAY-sən [1]) — текстовый формат обмена данными, основанный на JavaScript. Как и
многие другие текстовые форматы, JSON легко читается людьми.

	Формат JSON был разработан Дугласом Крокфордом[2].

	Несмотря на происхождение от JavaScript (точнее, от подмножества языка стандарта
ECMA-262 1999 года), формат считается независимым от языка и может использоваться
практически с любым языком программирования. Для многих языков существует готовый
код для создания и обработки данных в формате JSON.

	JSON-текст представляет собой (в закодированном виде) одну из двух структур:
Набор пар ключ: значение. В различных языках это реализовано как объект, запись,
структура, словарь, хэш-таблица, список с ключом или ассоциативный массив.
Ключом может быть только строка (регистрозависимая: имена с буквами в разных
регистрах считаются разными[3]), значением — любая форма. Упорядоченный набор
значений. Во многих языках это реализовано как массив, вектор, список или
последовательность.

	Это универсальные структуры данных: как правило, любой современный язык
программирования поддерживает их в той или иной форме. Они легли в основу JSON,
так как он используется для обмена данными между различными языками программирования.

	В качестве значений в JSON могут быть использованы:

Объект — это неупорядоченное множество пар ключ:значение, заключённое в фигурные
	скобки «{ }». Ключ описывается строкой, между ним и значением стоит символ «:».
	Пары ключ-значение отделяются друг от друга запятыми.

Массив (одномерный) — это упорядоченное множество значений. Массив заключается
	в квадратные скобки «[ ]». Значения разделяются запятыми.
Число.
Литералы true, false и null.
Строка — это упорядоченное множество из нуля или более символов юникода,
заключённое в двойные кавычки. Символы могут быть указаны с использованием
escape-последовательностей, начинающихся с обратной косой черты «\»
(поддерживаются варианты \", \\, \/, \t, \n, \r, \f и \b), или записаны
шестнадцатеричным кодом в кодировке Unicode в виде \uFFFF.

------------------------------------------------------------------------------
https://ru.wikipedia.org/wiki/ER-%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C
	ER-модель (от англ. entity-relationship model, модель «сущность — связь») —
модель данных, позволяющая описывать концептуальные схемы предметной области.

	ER-модель используется при высокоуровневом (концептуальном) проектировании
баз данных. С её помощью можно выделить ключевые сущности и обозначить связи,
которые могут устанавливаться между этими сущностями.

	Во время проектирования баз данных происходит преобразование ER-модели в
конкретную схему базы данных на основе выбранной модели данных (реляционной,
объектной, сетевой или др.).

	ER-модель представляет собой формальную конструкцию, которая сама по себе
не предписывает никаких графических средств её визуализации. В качестве
стандартной графической нотации, с помощью которой можно визуализировать
ER-модель, была предложена диаграмма «сущность-связь» (англ. entity-relationship
diagram, ERD, ER-диаграмма).

	Понятия «ER-модель» и «ER-диаграмма» часто не различают, хотя для визуализации
ER-моделей могут быть использованы и другие графические нотации, либо визуализация
может вообще не применяться (например, использоваться текстовое описание).

	Модель была предложена в 1976 году Питером Ченом[1][2], им же предложена
и самая популярная графическая нотация для модели.
------------------------------------------------------------------------------
------------------------------------------------------------------------------

		Сокращения принятые в тексте

СОП - сущностно ориентированное программирование
МО  - модель отношений
РВМ - реляционная виртуальная машина, исполняющая модель отношений

EOP - entity oriented programming
RVM - relations virtual machine
RM  - relations model

view - проекция, представление, явление

------------------------------------------------------------------------------
#/RM/jsonView
Представление МО в json (json проекция МО) - это объектное представление модели отношений в сегменте данных RVM.
Проекция сущности - это то как сущность представляется субъекту наблюдения, поэтому json представление хранится в контексте отображения.
Представление МО в json бывает 3х видов:
1. развёрнутая модель: отдельный объект для описания каждой сущности
2. компактная модель: в виде json объектов и массивов

------------------------------------------------------------------------------
#/json
Формат json не является языком программирования МО, поэтому для исполнения
МО требуется десериализация json в сегмент данных РВМ, а так же загрузка базовых
словарей сущностей для данного типа РВМ.

------------------------------------------------------------------------------
#/RM/jsonView
В древовидной структуре json, там где значения проекций сущностей известно и закэшировано,
находятся обычные значения json. В той части json структуры, где требуется вычислить json проекцию МО,
находится json объект с дополнительными свойствами "$obj", "$rel", "$sub", "/".
Такой объект интерпретируется RVM как сущность МО, которую возможно исполнить и
найти её json проекцию. Сущности могут иметь дополнительные поля в которых
закэшированы проекции свойств сущности или заданы сущности определяющие проекции данных свойств.

Любое значение json можно представить эквивалентной МО, json проекция которой
будет идентична этому json значению.

------------------------------------------------------------------------------
#/Entity
Под термином «сущность» следует понимать «сущую вещь», проще говоря, «что-то».
В Модели Отношений это контекстно зависимый функционирующий объект (активный объект).

------------------------------------------------------------------------------
#/RVM/exec
Вычисление результата исполнения экземпляра отношения происходит через интерпретацию
сущности (либо исполнение её json проекции) выступающей в качестве сущности-отношения
в данном экземпляре отношения. Что бы исполнить сущность, у неё должна быть проекция в
язык который понимает вычислитель (РВМ), например:
если используется JavaScript виртуальная машина, то у сущности должна быть
проекция в JavaScript. Если у сущности нет проекции в язык понимаемый имеющимся
вычислителем, то необходимо либо скомпилировать тело сущности (т.е. создать
проекцию в нужный язык), либо интерпретировать экземпляр отношения которым она является.
Сущность при исполнении в качестве отношения в экземпляре отношения может
создать в контексте свойство с именем языка исполнителя и скомпилировать себя
туда для непосредственного исполнения сейчас и/или в следующий раз.

При исполнении МО существует два потока:
	иерархически вертикальный - это поток байткода json
	иерархически горизонтальный - это поток данных в json.
Горизонтальные потоки это межслойное преобразование данных контроллерами MVC.
Вертикальные потоки это потоки управления интерпретацией json-байткода
контроллеров MVC виртуальной машиной.

------------------------------------------------------------------------------
#/RM/jsonView/types
		Соответсвие json значений и проекций Модели Отношений:

1. Number  - стабильная топологически замкнутая (т.е. сама в себя) проекция отношения double|int32|int64|uint32|uint64
2. Boolean - стабильная топологически замкнутая проекция отношения bool
3. String  - стабильная топологически замкнутая проекция отношения string, либо имя сущности
4. Object  - стабильная топологически замкнутая проекция отношения вмещения структуры, либо сущность если есть поля "$obj" или "$rel" или "$sub" или "/"
5. Array   - стабильная топологически замкнутая проекция цепочки отношений последовательного следования - ","
6. Null    - пустое пространство как потенциал вмещения проекции

Null и Array - это не совсем типы, они принципиально отличаются от типов и их обработка идёт отдельными кейсами if в РВМ:
1. Array - это контейнер проекцией одного или разного типа
2. Null - это отсутствие проекции любого типа

Начало цепочки отношений "," всегда есть Null:
((Null --","-> SomeEnt1) --","-> SomeEnt2) === jsonArray[SomeEnt1, SomeEnt2]
Это объясняется тем, что начало цепочки это то место перед которым нет другого
начального элемента, т.е. пустое пространство обозначаемое через Null.

------------------------------------------------------------------------------
#/RVM/init
		Алгоритм исполнения json после загрузки:

1. json после десериализации непостредственно представляет собой сегментом данных RVM
2. корневое значение json всегда есть корневая сущность загруженной Модели Отношений,
	которую необходимо исполнить
3. поля указывающие на субъект, отношение и объект могут либо содержать
    сущность по значению (типы json значений: объект, массив)
	либо содержать ссылки на сущность (типы json значений: строка, число)
	либо признак ссылки на контекстную сущность (типы json значений: null)
	либо значение boolean
4. Местоимения при нахождении их проекции возвращают ссылку на элементы контекста,
	проекции которых были найдены до вызова контроллера.

------------------------------------------------------------------------------
#/exec
Самое основное отношение это отношение "#/exec", оно исполняет сущность объекта указанного
в поле "$obj" и записывает полученную проекцию в поле "$sub" субъекта.
Именно это отношение исполняется для кажого поля json объекта, когда он указан
в качестве отношения сущности.

------------------------------------------------------------------------------
		Правила json скрипта (проекции МО в json):

1. json представляет собой агрегат проекций сущностей т.е. иерархию МО по сущности-субъекту,
2. местоимение субъекта "$sub" может являеться сущностью агрегатом проекции
3. запуск скрипта это вычисление проекции корневой сущности
4. внутри корневой json-сущности лежат разные проекции её свойств, либо...
5. внутри корневой json проекции лежит jsonView корневой сущности
6. у локальных не корневых проекций субъект "$sub" равен сущности в которой они лежат
7. если в json объекте есть поле "$rel", то значит этот объект описывает сущность МО
8. проекция состоит из проекций, т.о. получается иерархичность агрегирования

Внутри сущности находится иерархия по сущности-субъекту.

Новые сущности могут создаваться в результате проецирования, т.е. по сути являются тоже проекциями.

------------------------------------------------------------------------------
		Варианты взаимоотношений узлов json:

1. Проекция в проекции
2. Сущность в сущности (в полях "$obj", "$rel", "$sub")
3. Сущность в проекции (в объекте или массиве)
4. Проекция в сущности (в полях "$obj", "$rel", "$sub")
5. Строковая или адресная ссылка на сущность в сущности (в полях "$obj", "$rel", "$sub")

------------------------------------------------------------------------------
		О свойствах (атрибутах) и элементах сущности:

У сущности кроме её внутренней троичной структуры есть свойства (её проекции) и элементы свойств.
Элементами сущности являются разные её свойства.
Элементы объекта и есть его свойства если этот объект не сущность.
Свойства (properties) сущности есть элементы (elements) её представления (view).
(json properties are elements of its view).

https://books.google.ru/books?id=VfcX9wJEH3YC&pg=PT42&redir_esc=y&hl=ru#v=onepage&q&f=false

Сущность это то что является субъекту при наблюдении объекта, через призму их связывающего отношения.
Таким образом сущьность есть результат отношения связывающего объект и субъект.
Субъект вмещает в себя явление сущности объекта.

Результат исполнения сущности это проекция в триаде MVC, но т.к. МО это самокомпилирующийся иерархический многослойный MVC,
то субъект у сущности это родительский View вмещающий проекцию данной сущности.
Таким образом результат проецирования сущности сохраняется в поле "", значение которого состоит из отдельных
проекций агрегируемых сущностей. Следовательно если объект json имеет признак того, что это сущность,
то данный объект json не должен иметь в себе полей с текстовыми названиями, а только: "id", "$obj", "$rel", "$sub", "/".
Решением данной проблемы может быть вариант когда текстовые поля внутри объекта json будут хранить в себе кэши проекций
данной сущности другими контроллерами (сущностями-отношениями), например:

{
   "id": "this entity english name",
   "RusView": "русское название этой сущности",
   "jsView": "this entity java script view",
   "C#View": "this entity C# code view",
   "$obj": "object entity model",
   "$rel": "relation entity model",
   "$sub": "subject entity model"
}

------------------------------------------------------------------------------
		Об адресации в json:

1. корневая сущность имеет встроенное название #
2. сущности имеют уникальные названия - английскую проекцию
3. представления имеют иерархическую адресацию по дереву представленией, имена разделены силволом '/'

------------------------------------------------------------------------------
		Заметки:

1. кэширование проекций сущностей осуществляется только явным образом, через отношение jsonView?
3. для символьных или индексных ссылок указанных в качестве субъекта, отношения или объекта сущности должна быть найдена указанная сущность

------------------------------------------------------------------------------
		Виды топологий сущностей:

1. EntId = SubId = RelId = ObjId - статическое собственное значение,
	сущность топологически замкнута сама на себя через себя
2. EntId = SubId = ObjId - динамическое собственное значение,
	сущность топологически замкнута сама на себя,
	через другую сущность проектор - сущность отношение
3. EntId = SubId - ссылка или хранилище проекции,
	сущность топологически не замкнута сама на себя,
	сущность сохраняет в себе проекцию другой сущности формируемой
	другой сущность проектором - сущность отношением
4. EntId = ObjId - источник проекции для субъективного восприятия другими сущностями,
	сущность топологически не замкнута сама на себя,
	сущность формирует собственную проекцию,
	через другую сущность проектор - сущность отношение
------------------------------------------------------------------------------

		Семантика значений разных типов в полях "$sub", "$rel", "$obj" json объекта описывающего сущность:
------------------------------------------------------------------------------
 тип значения |                     сементика значения
------------------------------------------------------------------------------
  Number      | адрес объекта типа json в памяти
------------------------------------------------------------------------------
  Boolean     | непосредственное значение = true/false
------------------------------------------------------------------------------
  String      | иерархический путь к сущности относительно текущего контекста
              | исполнения
------------------------------------------------------------------------------
  Object      | json объект определяющий непосредственное значение сущности
------------------------------------------------------------------------------
  Array       | json массив определяющий непосредственное значение сущности
------------------------------------------------------------------------------
  Null        | значение по умолчанию, пустой указатель на сущность
              | обозначающий топологическая замкнутость на текущую проекцию
              | сущности в контексте исполнения EntView[""]
------------------------------------------------------------------------------
  Entity      | непосредственное описание другой сущности
------------------------------------------------------------------------------

		Семантика json значений при исполнении  (json как байткод RVM):
------------------------------------------------------------------------------
 тип значения |                     сементика значения
------------------------------------------------------------------------------
  Number      | адрес скомпилированного тела сущности, которое необходимо исполнить RVM
------------------------------------------------------------------------------
  Boolean     | флаг разрешения проецирования объекта в субъект
              | true : спроецировать
			  | false : не проецировать
------------------------------------------------------------------------------
  String      | иерархический путь к json значению относительно контекста исполнения,
              | которое необходимо исполнить RVM
------------------------------------------------------------------------------
  Object      | множество пар "имя поля": значение поля, где:
              |  значение поля - иерархический путь к json значению относительно
              |   контекста исполнения, которое необходимо исполнить
              |  имя поля - иерархический путь к json значению относительно
			  |   контекста исполнения, куда необходимо спроецировать сущность
              | вычисление проекций множества пар может происходить параллельно, в многопоточном режиме
------------------------------------------------------------------------------
  Array       | массив значений json которые необходимо последовательность исполнить
              | в текущем контексте исполнения, при этом результат предыщущего
              | исполнения всегда доступен для следующей исполняющейся сущности
              | как текущее значение проекции
------------------------------------------------------------------------------
  Null        | возврат текущей контекстной проекции в саму себя, т.е. по сути
              | отсутствие действия над текущей проекцией в контексте исполнения
------------------------------------------------------------------------------
  Entity      | сущность, для которой надо создать дочерний контекст и исполнить
------------------------------------------------------------------------------

		Программирование на МО

Контекстно зависимая проекция сущности может быть получена в результате
исполнения (или вычисления) отношения "$rel" в контексте субъекта "$sub", объекта "$obj".
Доступ непосредственно к текущего значения проекции осуществляется через имя "/".
Сущность может использовать контекстно зависимые местоимения в своей модели,
таким образом реализуется контекстно зависимость проекции сущности.

Аналогичное выражение на языке С++ выглядело бы следующим образом:

json   context_entity_value;
context_entity_value = $sub->$rel( context_entity_value, $obj );


В отличие от обычных языков программирования, в МО стек контекстов вызовов и стэк локальных адресных пространств (локальные переменные) принципиально разделены.
Локальное адресное пространство при исполнении сущности-отношения указывается всегда явно,
а стэк контекстов исполнения в общем случае древовидный, т.е. по сути и не является стэком,
что обеспечивает лёгкое многопоточное исполнение сущностей
Так же при исполнении сущности-отношения можно указать в каком контексте она будет исполняться, в текущем или родительском
аргументы тоже группируются в независимый от вызова пакет, и может быть многократно использован в контексте исполнения
в обычных языках стэк контекстов (агрументы вызова, адреса возвратов из функции) объединён с локальными адресными пространствами функций, поэтому очень важно четко знать где что записано в стэке, четко соблюдать call convention что бы случайно не использовать некую переменную или аргумент как адрес возврата

адресация у МО сейчас устроена так, корневое адресное пространство это контекст, он содержит ссылки на адресные подпространства:
./        - модель сущности (для которой инстанцирован данный контекст)
$obj/       - контекстный объект
$sub/       - контекстное субъект
$rel/       - контекстно отношение
/         - локальное адресное пространство для создания проекции, т.е. результата исполнения сущности-отношения

*/
#pragma once
#ifndef NLOHMANN_JSON_FWD_HPP
#define NLOHMANN_JSON_FWD_HPP

#include <cstdint> // int64_t, uint64_t
#include <map> // map
#include <memory> // allocator
#include <string> // string
#include <vector> // vector

#define SWITCH(str)  switch(s_s::str_hash_for_switch(str))
#define CASE(str)    static_assert(s_s::str_is_correct(str) && (s_s::str_len(str) <= s_s::MAX_LEN),\
"CASE string contains wrong characters, or its length is greater than 9");\
case s_s::str_hash(str, s_s::str_len(str))
#define DEFAULT  default

namespace s_s
{
	typedef unsigned char uchar;
	typedef unsigned long ullong;
	const uchar MAX_LEN = 4;
	const ullong N_HASH = static_cast<ullong>(-1);
	constexpr ullong raise_128_to(const uchar power) { return 1ULL << 7 * power; }
	constexpr bool str_is_correct(const char* const str) { return (static_cast<signed char>(*str) > 0) ? str_is_correct(str + 1) : (*str ? false : true); }
	constexpr uchar str_len(const char* const str) { return *str ? (1 + str_len(str + 1)) : 0; }
	constexpr ullong str_hash(const char* const str, const uchar current_len) { return *str ? (raise_128_to(current_len - 1) * static_cast<uchar>(*str) + str_hash(str + 1, current_len - 1)) : 0; }
	inline ullong str_hash_for_switch(const char* const str) { return str_hash(str, str_len(str)); }
	inline ullong str_hash_for_switch(const std::string& str) { return str_hash(str.c_str(), str.length()); }
}

//	32 bit datatypes for x68 build
namespace nlohmann
{
	template<typename = void, typename = void>
	struct adl_serializer;

	template<
		template<typename U, typename V, typename... Args> class ObjectType		=	std::map,
		template<typename U, typename... Args> class ArrayType					=	std::vector,
		class StringType														=	std::string,
		class BooleanType														=	bool,
		class NumberIntegerType													=	std::int32_t,
		class NumberUnsignedType												=	std::uint32_t,
		class NumberFloatType													=	float,
		template<typename U> class AllocatorType								=	std::allocator,
		template<typename T, typename SFINAE = void> class JSONSerializer		=	adl_serializer
	> class basic_json;

	template<typename BasicJsonType>
	class json_pointer;

	using json = basic_json<>;
}

#endif
#include "./nlohmann/json.hpp"

using namespace std;
using namespace nlohmann;

////////////////////////////// VERSION //////////////////////////////
const string RVM_version = "2.5.0.52"s;
////////////////////////////// VERSION //////////////////////////////

inline  size_t ref2id(json& ref_val)  { return (size_t)&ref_val; }
inline  json&  id2ref(size_t ptr_val) { return *((json*)ptr_val); }

//	Контекст исполнения сущности, инстанцированная проекция модели сущности
struct EntContext
{
	json& val;				//	локальное адресное пространство
	json& obj;				//	контекстный объект
	json& sub;				//	контекстный субъект
	json& ent;				//	сущность, модель для контекста
	struct EntContext& ctx;	//	родительский контекст исполнения
	json& root;				//	корневая сущность, корень адресного пространства

	EntContext(json& v, json& o, json& s, json& e, EntContext& c, json& r)
		: val(v), obj(o), sub(s), ent(e), ctx(c), root(r)
	{
	}
	EntContext(json& v, json& o, json& s, json& e, json& r)
		: val(v), obj(o), sub(s), ent(e), ctx(*this), root(r)
	{
	}
};

inline  void	JSONExec(EntContext& ec, json& rel);
typedef void	(*x86View)(EntContext& ec);

#define IMPORT_RELATIONS_MODEL		"?ImportRelationsModel@@YAXAAV?$basic_json@Vmap@std@@Vvector@2@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@_NHIMVallocator@2@Uadl_serializer@nlohmann@@@nlohmann@@@Z"
__declspec(dllexport) void ImportRelationsModel(json &Ent);
typedef void (*InitDict)(json &Ent);
static InitDict	You_must_define_ImportRelationsModel_function_in_your_RM_dictionary = ImportRelationsModel;

template<class _T>
vector<_T> split(const _T& str, const _T& delim, bool find_empty = false)
{
	vector<_T> tokens;
	size_t prev = 0, pos = 0;
	do
	{
		pos = str.find(delim, prev);
		if (pos == _T::npos) pos = str.length();
		_T token = str.substr(prev, pos - prev);
		if (!token.empty() || find_empty) tokens.push_back(token);
		prev = pos + delim.length();
	} while (pos < str.length() && prev < str.length());
	return tokens;
}

inline void throw_json(const EntContext& ec, const string& function, const json& error)
{
	json	j;
	j["__FUNCTION__"] = function;
	j["exception"] = error;
	j["EntContext"]["./"] = ec.ent;
	j["EntContext"]["$sub/"] = ec.sub;
	j["EntContext"]["$obj/"] = ec.obj;
	j["EntContext"]["/"] = ec.val;
	throw j;
}

inline void	ReferProperty(size_t& segment, const string& it)
{
	json&	ref = id2ref(segment);
	if (ref.is_object())
	{
		segment = ref2id(ref[it]);
	}
	else if (ref.is_array())
	{
		segment = ref2id(ref[std::stoul(it)]);
	}
	else if (ref.is_null())
	{
		try {
			ref = json::array();
			segment = ref2id(ref[std::stoul(it)]);
		}
		catch (...)	//	это не число
		{
			ref = json::object();
			segment = ref2id(ref[it]);
		}
	}
	else
		throw json({ {__FUNCTION__, it} });
}

inline json& ReferEntity(EntContext& ec, const string& str)
{
	EntContext* ctxptr = &ec;
	size_t	prev = 0, pos = 0, segment = NULL, len = str.length();
	while (true)
	{
		pos = str.find_first_of('/', prev);
		string it = str.substr(prev, pos - prev);
		if (pos == string::npos)
		{
			SWITCH(it)
			{
			CASE("..") :	throw json({ {__FUNCTION__, "property '"s + str + "' does not exist!"} });
			CASE("#") :		return ctxptr->root;
			CASE("") :		return ctxptr->val;
			CASE("$obj") :	return ctxptr->obj;
			CASE("$sub") :	return ctxptr->sub;
			CASE(".") :		return ctxptr->ent;
			DEFAULT:		throw json({ {__FUNCTION__, "pronoun '"s + str + "' does not exist in entity context!"s} });
			}
		}

		prev = pos + 1;

		SWITCH(it)
		{
			CASE(".."):		ctxptr = &ctxptr->ctx;			break;
			CASE("#"):		segment = ref2id(ctxptr->root);	goto prop;
			CASE(""):		segment = ref2id(ctxptr->val);	goto prop;
			CASE("$obj"):	segment = ref2id(ctxptr->obj);	goto prop;
			CASE("$sub"):	segment = ref2id(ctxptr->sub);	goto prop;
			CASE("."):		segment = ref2id(ctxptr->ent);	goto prop;
			DEFAULT:		throw json({ {__FUNCTION__, "pronoun '"s + str + "' does not exist in entity context!"s} });
		}
		
		if (prev >= len)	throw json({ {__FUNCTION__, "property '"s + str + "' does not exist!"} });
	}
prop:
	while (prev < len)
	{
		pos = str.find_first_of('/', prev);
		if (pos == string::npos) pos = len;
		string it = str.substr(prev, pos - prev);
		prev = pos + 1;
		try { ReferProperty(segment, it); }
		catch (json& j)				{ throw json({ {__FUNCTION__, j} }); }
		catch (invalid_argument e)	{ throw json({ {__FUNCTION__, "property '"s + str + "' invalid_argument, " + e.what()} }); }
		catch (out_of_range e)		{ throw json({ {__FUNCTION__, "property '"s + str + "' out_of_range, " + e.what()} }); }
		catch (...)					{ throw json({ {__FUNCTION__, "property '"s + str + "' does not exist!"} }); }
	}

	return id2ref(segment);
}

inline json& ReferEntity(EntContext& ec, json& ref)
{
	switch (ref.type())
	{
	case json::value_t::string:		//	иерархический путь к json значению
		return ReferEntity(ec, ref.get_ref<string&>());

		//	абсолютный адрес сущности
	case json::value_t::number_float:
	case json::value_t::number_integer:
	case json::value_t::number_unsigned:
		return id2ref(ref.get<size_t>());

		//	местоимение проекции контекстной сущности
	case json::value_t::null:
		return ec.val;

		//	если это не адрес то возвращаем значение
	default:
		return ref;
	}
}

//	Исполнение сущности либо json байткода
//	имеет прототип отличный от других контроллеров и не является контроллером
//	рекурсивно раскручивает структуру проекции контроллера доходя до простых json или вызовов скомпилированных сущностей
inline void JSONExec(EntContext& ec, json &rel)
{
	switch (rel.type())
	{
	//	абсолютный адрес скомпилированного тела сущности
	case json::value_t::number_unsigned: 
		try
		{
			((x86View)rel.get<size_t>())(ec);
			return;
		}
		catch (json& j)					{ throw j; }
		catch (json::exception& e)		{ throw json("json::exception: "s + e.what() + ", id: "s + to_string(e.id)); }
		catch (std::exception& e)		{ throw json("std::exception: "s + e.what()); }
		catch (...)						{ throw json("unknown exception"s); }

	//	иерархический путь к json значению
	case json::value_t::string:
		try
		{
			JSONExec(ec, ReferEntity(ec, rel.get_ref<string&>()));
			return;
		}
		catch (json& j)					{ throw json({ {rel.get<string>(), j} }); }

	//	лямбда вектор, который управляет последовательным изменением проекции сущности
	case json::value_t::array:
	{
		int i = 0;
		for (auto& it : rel)
		{
			try
			{
				JSONExec(ec, it);
				i++;
			}
			catch (json& j)				{ throw json({ {"["s + to_string(i) + "]"s, j} }); }
		}
		return;
	}

	case json::value_t::object:
	{
		if (rel.count("$rel"))	//	это сущность, которую надо исполнить в новом контексте?
		{
			try {
				JSONExec(
					EntContext(
						ec.val,
						ReferEntity(ec, rel["$obj"]),
						ReferEntity(ec, rel["$sub"]),
						rel,
						ec,
						ec.root),
					ReferEntity(ec, rel["$rel"])
				);
			}
			catch (json& j)				{ throw json({ {"$rel"s, j} }); }	//	rel["$rel"].dump()
		}
		else//	контроллер это лямбда структура, которая управляет параллельным проецированием сущностей
		{
			for (auto& it : rel.items())
			{
				try
				{
					JSONExec(
						EntContext(
							ReferEntity(ec, it.key()),
							ec.obj,
							ec.sub,
							ec.ent,
							ec.ctx,
							ec.root),
						ReferEntity(ec, it.value())
					);
				}
				catch (json& j)			{ throw json({ {it.key(), j} }); }
			}

			/*ToDo:	надо переделать на параллельное проецирование
			struct callctx
			{
				EntContext	ec;
				string&		key;
				json&		rel;
				callctx(EntContext& c, string& k, json& r) : ec(c), key(k), rel(r) {}
			};

			vector<callctx>	vec;
			for (auto& it : rel.items())
			{
				string&	key = it.key();
				try { vec.push_back(callctx(EntContext(ReferEntity(ec, key), ec.obj, ec.sub, ec.ent, ec.ctx, ec.root), key, ReferEntity(ec, it.value()))); }
				catch (string& error) { throw("\n view "s + key + " : "s + error); }
				catch (json::exception& e) { throw("\n view "s + key + " : "s + "json::exception: "s + e.what() + ", id: "s + to_string(e.id)); }
				catch (std::exception& e) { throw("\n view "s + key + " : "s + "std::exception: "s + e.what()); }
				catch (...) { throw("\n view "s + key + " : "s + "unknown exception"s); }
			}

			parallel_for_each(begin(vec), end(vec), [](callctx& it) {
				try { JSONExec(it.ec, it.rel); }
				catch (string& error) { throw("\n view "s + it.key + " : "s + error); }
				catch (json::exception& e) { throw("\n view "s + it.key + " : "s + "json::exception: "s + e.what() + ", id: "s + to_string(e.id)); }
				catch (std::exception& e) { throw("\n view "s + it.key + " : "s + "std::exception: "s + e.what()); }
				catch (...) { throw("\n view "s + it.key + " : "s + "unknown exception"s); }
			});*/
		}
		return;
	}

	//	битовая маска для условного проектора ViewEntity
	case json::value_t::boolean:
		if (rel)
		{
			try
			{
				JSONExec(
					EntContext(
						ec.sub,
						ec.ctx.obj,
						ec.ctx.sub,
						ec.ctx.ent,
						ec.ctx.ctx,
						ec.root),
					ec.obj
				);
			}
			catch (json& j)				{ throw json({ {"true"s, j} }); }
		}
		return;

	case json::value_t::number_float:
	case json::value_t::number_integer:
		throw json({ {rel.dump(), "can't exec wrong json numeric type"s} });

	default:
		return;	//	null - означает отсутствие отношения, т.е. неизменность проекции
	}
}

//	добавление сущности с закэшированной x86 проекцией
inline json&	Addx86Entity(json& Subject, const string& Name, x86View View, const string& Description)
{
	Subject[Name] = (size_t)View;
	Subject["help"][Name] = json::object();
	Subject["help"][Name]["description"] = Description;
	return Subject["help"][Name];
}

#pragma warning (disable: 4244)
inline bool get_bool(const json& obj, const string& field)
{
	if (obj.count(field))
	{
		const json& val = obj[field];
		switch (val.type())
		{
		case json::value_t::number_float:   return bool(val.get<json::number_float_t>() != 0.0);
		case json::value_t::number_integer: return bool(val.get<json::number_integer_t>() != 0);
		case json::value_t::number_unsigned:return bool(val.get<json::number_unsigned_t>() != 0);
		case json::value_t::boolean:        return bool(val.get<json::boolean_t>());
		case json::value_t::string:         return bool(val.get_ref<const json::string_t&>() != ""s && val.get_ref<const json::string_t&>() != "false"s);
		default: break;
		}
	}

	return bool();
}

inline float get_float(const json& obj, const string& field)
{
	if (obj.count(field))
	{
		const json& val = obj[field];
		switch (val.type())
		{
		case json::value_t::number_float:   return float(val.get<json::number_float_t>());
		case json::value_t::number_integer: return float(val.get<json::number_integer_t>());
		case json::value_t::number_unsigned:return float(val.get<json::number_unsigned_t>());
		case json::value_t::boolean:        return float(val.get<json::boolean_t>() ? 1.0 : 0.0);
		case json::value_t::string:         return float(std::stod(val.get_ref<const json::string_t&>()));
		default: break;
		}
	}

	return float();
}

inline float get_int(const json& obj, const string& field)
{
	if (obj.count(field))
	{
		const json& val = obj[field];
		switch (val.type())
		{
		case json::value_t::number_float:   return int(val.get<json::number_float_t>());
		case json::value_t::number_integer: return int(val.get<json::number_integer_t>());
		case json::value_t::number_unsigned:return int(val.get<json::number_unsigned_t>());
		case json::value_t::boolean:        return int(val.get<json::boolean_t>() ? 1 : 0);
		case json::value_t::string:         return int(std::stoi(val.get_ref<const json::string_t&>()));
		default: break;
		}
	}

	return int();
}

inline float get_unsigned(const json& obj, const string& field)
{
	if (obj.count(field))
	{
		const json& val = obj[field];
		switch (val.type())
		{
		case json::value_t::number_float:   return unsigned(val.get<json::number_float_t>());
		case json::value_t::number_integer: return unsigned(val.get<json::number_integer_t>());
		case json::value_t::number_unsigned:return unsigned(val.get<json::number_unsigned_t>());
		case json::value_t::boolean:        return unsigned(val.get<json::boolean_t>() ? 1 : 0);
		case json::value_t::string:         return unsigned(std::stoul(val.get_ref<const json::string_t&>()));
		default: break;
		}
	}

	return unsigned();
}
