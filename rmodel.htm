<!DOCTYPE html>
<html><head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
</head>
<body>
<div class="Section1">

<p><span style="font-size:16.0pt;mso-ansi-language:EN-US" lang="EN-US"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style="font-size:16.0pt">Навь
– Модель Отношений<o:p></o:p></span></p>

<p>Модель Отношений – сокращённо МО, это язык метапрограммирования. Модель
Отношений в отличие от обычных языков программирования основанных на
линейно-текстовом представлении программы, основана на представлении программы
в виде взаимосвязанного множества сущностей.</p>

<p>В своей основе МО, так же как и <span style="mso-ansi-language:
EN-US" lang="EN-US">ER</span>-<span style="mso-ansi-language:EN-US" lang="EN-US">model</span>,
построена на двух главных концепциях: сущность и отношение (связь). Но
принципиальным отличием является то, что <i style="mso-bidi-font-style:normal">сущность</i>
в МО представляет из себя экземпляр определённого <i style="mso-bidi-font-style:
normal">отношения</i> между <i style="mso-bidi-font-style:normal">субъектом</i>
и <i style="mso-bidi-font-style:normal">объектом</i>. <span style="mso-spacerun:yes">&nbsp;</span>Поэтому каждая сущность определяется тремя
сущностями, каждая из которых выступает <i style="mso-bidi-font-style:normal">субъектом</i>,
<i style="mso-bidi-font-style:normal">отношением</i> и <i style="mso-bidi-font-style:
normal">объектом</i> соответственно.</p>

<p>Термины субъект, отношение и объект употребляемые в контексте МО означают
аспект или то качество в котором сущность выступает в определённом экземпляре
отношения. То что сущность всегда определяется через единение 3х качеств 3х
сущностей характеризует её как триединую. </p>

<p>Для лучшего пониманию приведу пример описания класса сущности в С++:</p>

<p><span style="mso-ansi-language:EN-US" lang="EN-US">class Entity<o:p></o:p></span></p>

<p><span style="mso-ansi-language:EN-US" lang="EN-US">{<o:p></o:p></span></p>

<p><span style="mso-ansi-language:EN-US" lang="EN-US"><span style="mso-tab-count:
1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Entity</span>* <span style="mso-ansi-language:
EN-US" lang="EN-US">Subject</span>;<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>\\
указатель на сущность выступающую в качестве субъекта</p>

<p><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="mso-ansi-language:EN-US" lang="EN-US">Entity</span>* <span style="mso-ansi-language:EN-US" lang="EN-US">Relation</span>;<span style="mso-tab-count:
1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>\\ указатель на сущность выступающую в качестве отношения</p>

<p><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="mso-ansi-language:EN-US" lang="EN-US">Entity</span>* <span style="mso-ansi-language:EN-US" lang="EN-US">Object</span>;<span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>\\
указатель на сущность выступающую в качестве объекта</p>

<p>};</p>

<p>Таким образом весь концептуальный фундамент в Модели Отношений стоит из
одной единственной и простой концепции триединой сущностий, в отличие от
обычных процедурных и объектных языков программирования, где в основе всегда
лежит две концепции: Объект (структура, данные) и Метод (процесс, процедура,
алгоритм).<span style="mso-spacerun:yes">&nbsp; </span></p>

<p>Такое триединство сущности определяет МО как иерархическое пространство
взаимосвязанных триединых сущностей. Таким образом и пространство, вмещающее
модель отношений является иерархичным, потому что, каждая сущность является
системой состоящих из 3х подобных элементов: сущности субъекта, сущности
отношения и сущности объекта. В МО одновременно присутствует 3 иерархии:
иерархия агрегирования (определяется через использование в качестве субъекта),
иерархия типов отношений (определяется через использование в качестве
отношения), иерархия использоваия (определяется через использование в качестве
объекта).</p>

<p>Пространство, вмещающее модель отношений является нульмерным, потому что у
сущностей нет неявного отношения порядка и направления расположения. Отношение
порядка явно определяется в модели отношений, таким образом, на сущностях можно
определить любое N-мерное пространство.</p>

<p>Каждая сущность обладает уникальностью. Например: при хранении в базе данных
все сущности уникально нумеруются, таким образом отображение МО на таблицу БД
получается уже одномерным иерархическим.</p>

<p>В Модели отношений такие концепции как данные и процесс есть просто два
аспекта сущности. Сущность можно либо прочитать - спроецировать (проявить для
восприятия) либо исполнить (активировать потоком управления её проекцию как
сегмент кода), в результате чего может поменяться как структура данных так и
структура алгоритма.</p>

<p>В Модели Отношений сохранение состояния сущности есть непрерывный процесс её
существования, обеспечивающийся самоотображением сущности, её состояния в самою
себя. Это можно представить как процесс движения информации о состоянии по
кругу (например как в регистровой памяти процессора). Конкретно это получается
если в своей структуре экземпляра отношения сущность выступает как субъект.</p>

<p>При исполнении экземпляра отношения, т.е. триединой сущности, она
превращается в троицу <span style="mso-ansi-language:EN-US" lang="EN-US">MVC</span>
(<span style="mso-ansi-language:EN-US" lang="EN-US">Model</span>-<span style="mso-ansi-language:EN-US" lang="EN-US">View</span>-<span style="mso-ansi-language:EN-US" lang="EN-US">Controller</span>), т.е. сущность объект
выступает в качестве модели (что представляется), сущность субъект выступает в
качестве представления (куда проецируется), а сущность отношение выступает в
качестве контроллера (проекция сущности отношения исполняется как код
виртуальной машиной Модели Отношений).</p>

<p><br>
Над сущностями в модели отношений можно производить всего только 2 операции:</p>

<p>1. Отображение (<span style="mso-ansi-language:EN-US" lang="EN-US">View</span>)
– включает в себя как бы 2 действия: чтение объекта и изменение представления
(шаблона) субъекта и/или модели отношений субъекта</p>

<p>2. Исполнение (Exec) - для определения представления (шаблона) экземпляра
отношения</p>

<p><br>
Операция записи является частным случаем проявления операции исполнения.
Представления одних сущностей могут порождаться исполнением других.</p>

<p>В МО есть только сущности, но в зависимости от того через какое отношение
они определяются, они могут играть роль переменных, функций, методов, структур,
объектов, доменов значений и т.д.</p>

<p>Сама по себе модель отношений трудна для непосредственного восприятия
программистом, поэтому программирование ведётся посредством оперирования в
терминах визуального представления сущностей предметной области.</p>

<p><br>
По сравнению с обычной программой модель отношений представляет собой гибрид
сегмента данных и кода, вернее более точным будет сказать единого семантически
неразделённого сегмента. Поэтому модель отношений исполняется посредством
самомодификации как полиморфный вирус. Программа на модели отношений может
меняться от запуска к запуску, таким образом, имея свою собственную жизнь.</p>

<p><br>
Программирование с использованием модели отношений подразумевает совершенно
иную концепцию программирования, потому что модель отношений как таковая не
требует стадии компиляции и может исполняться параллельно с её
программированием. Более того, уже написанная программа на модели отношений,
может в процессе своей жизни быть многократно подвергнута изменению,
перепрограммированию, через визуальное программирование на основе представлений
сущностей предметной области.</p>

<p><br>
Так же модель отношений нельзя отнести к процедурному или к объектному
программированию, потому что атомом модели отношений является сущность, которая
может выступать и как объект и как процедура. В МО нет классов как в ООП, там
есть только домены сущностей, причём домен появляется с первой доменообразующей
сущностью. В МО используется клонирование сущностей внутри домена. От любой
сущности (кроме доменообразующей) можно породить новый домен сущностей.</p>

<p><br>
Пример:</p>

<p>Entity10 (Entity10 -Entity10-&gt; Entity10 ) - доменообразующая сущность,
она сама для себя является типом</p>

<p>Entity20 (Entity20 -Entity10-&gt; Entity20 ) - некая сущность входящая в
домен Entity10</p>

<p>Entity30 (Entity30 -Entity20-&gt; Entity30 ) - некая сущность входящая в домен
Entity20, таким образом сущность Entity20 теперь стала доменообразующей, но при
этом сама не входит в него!</p>

<p><br>
Примечание: для текстового представления простых МО используется несложный
текстовый псевдоязык (заметьте, что это всего лишь представление МО, но не её
первичная структура!!!).</p>

<p>В псевдоязыке сущности описываются следующим образом:</p>

<p>&lt;сущность&gt;( &lt;сущность субъект&gt; --&lt;сущность отношение&gt;--&gt;
&lt;сущность объект&gt; )</p>

<p>например: a (<span style="mso-ansi-language:EN-US" lang="EN-US">global</span><span lang="EN-US"> </span>-int-&gt; a ) - переменная а, входит в состав агрегата <span style="mso-ansi-language:EN-US" lang="EN-US">global</span>, входит в домен int,
значением имеет саму себя (т.е. не является ссылкой)</p>

<p>другой пример: sum ( a -add-&gt; b ) - сущность sum есть сумма а и b (при
чтении означает сумму, при исполнении возвращает результат суммирования)</p>

<p>Программирование с использованием модели отношений подразумевает в основном
два стереотипа:</p>

<p>1. В качестве основы будущей программы берётся дизайнер модели отношений и
посредством написания многоуровневых словарей сущностей предметной области и
сущностей представления сущностей предметной области постепенно превращается в
конечную программу, которая будет исполняться виртуальной или аппаратной
машиной модели отношений. В данном варианте программа может быть дописана
пользователями если функция перепрограммирования не будет заблокирована
разработчиками.</p>

<p>2. тоже самое что и в 1 пункте но в конце разработки генерируется исходный
код программы на обычном языке программирования, который в итоге компилируется
и получается готовый продукт</p>

<p><br>
Замечательной особенностью модели отношений является то, что количество сущностей
в МО (модели отношений) есть точная метрика сложности программы. Таким образом
при оптимизации модели отношений можно точно определить степень оптимизации.</p>

<p><br>
Другой замечательной особенностью МО является отсутствие явной однопоточности в
исполнении, так как в ней нет линейности при исполнении присущей
линейно-текстовым языкам программирования. В МО там, где не указано явно что
отношения должны искаться последовательно они могут находиться параллельно.
Поэтому виртуальная машина МО может использовать то количество ядер в системе,
которое есть в наличие.</p>

<p><br>
Так же в модели отношений можно делать автоматические эквивалентные
преобразования, что даёт путь к написанию сценариев автоматической оптимизации
программы. Например, поиск шаблонных участков МО для их выделения в отдельную
сущность и последующей заменой.</p>

<p>Если вас заинтересовал данный язык метапрограммирования, пишите мне по
адресу: <span style="mso-ansi-language:EN-US" lang="EN-US"><a href="mailto:netkeep80@gmail.com">netkeep<span style="mso-ansi-language:
RU" lang="RU">80@</span>gmail<span style="mso-ansi-language:RU" lang="RU">.</span>com</a></span><span lang="EN-US"> </span></p>

<p>Роман Павлович Вертушкин</p>

<p class="MsoNormal"><o:p>&nbsp;</o:p></p>

</div>


</body></html>